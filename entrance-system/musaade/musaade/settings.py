"""
Django settings for musaade project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import sys
import json
import logging
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--kq58oley03edt8cu_sbjr3j_qof)r9(cn*$=a8+9$0l&26tj5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'entrance_system',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'entrance_system.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'musaade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'entrance_system/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'musaade.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# TODO: Get from environment variables
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'entrance_system',
        'USER': 'user',
        'PASSWORD': 'password',
        'HOST': 'entrance_system_database',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'entrance_system/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'entrance_system/static'),
)

STATIC_ROOT = os.path.join(BASE_DIR, 'static_files')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',)
}

LOGIN_EXEMPT_URLS = (
    r'^entrance_system/login/$',
    r'^api/\w+/$'
)

# TODO: Get rid of PDF logs, use multiple loggers
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s | %(levelname)s | %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# TODO: Get from environment variables
USER_SETTINGS_FILE = ".settings.json"

with open(USER_SETTINGS_FILE) as settings_file:
    settings = json.load(settings_file)

    ENCRYPTION_KEY = settings["encryption"]["key"].encode("utf-8")
    ENCRYPTION_IV = settings["encryption"]["iv"].encode("utf-8")

    HARDWARE_URL = settings["hardware"]["url"]
    HARDWARE_KEY = settings["hardware"]["key"].encode("utf-8")
    HARDWARE_IV = settings["hardware"]["iv"].encode("utf-8")

    HES_API_URL = settings["hes_api"]["url"]
    HES_API_TOKEN = settings["hes_api"]["token"]

    EMAIL_HOST = settings["email"]["host"]
    EMAIL_PORT = settings["email"]["port"]
    EMAIL_HOST_USER = settings["email"]["user"]
    EMAIL_HOST_PASSWORD = settings["email"]["password"]
    EMAIL_USE_TLS = settings["email"]["use_tls"]
